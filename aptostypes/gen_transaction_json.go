// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package aptostypes

import (
	"encoding/json"
)

var _ = (*transactionMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t Transaction) MarshalJSON() ([]byte, error) {
	type Transaction struct {
		Type                    string     `json:"type"`
		Hash                    string     `json:"hash"`
		Sender                  string     `json:"sender"`
		SequenceNumber          jsonUint64 `json:"sequence_number"`
		MaxGasAmount            jsonUint64 `json:"max_gas_amount"`
		GasUnitPrice            jsonUint64 `json:"gas_unit_price"`
		GasCurrencyCode         string     `json:"gas_currency_code"`
		ExpirationTimestampSecs jsonUint64 `json:"expiration_timestamp_secs"`
		Payload                 *Payload   `json:"payload"`
		Signature               *Signature `json:"signature"`
		Events                  []Event    `json:"events"`
		Version                 jsonUint64 `json:"version"`
		StateRootHash           string     `json:"state_root_hash"`
		EventRootHash           string     `json:"event_root_hash"`
		GasUsed                 jsonUint64 `json:"gas_used"`
		Success                 bool       `json:"success"`
		VmStatus                string     `json:"vm_status"`
		AccumulatorRootHash     string     `json:"accumulator_root_hash"`
		Changes                 []Change   `json:"changes"`
		Timestamp               jsonUint64 `json:"timestamp"`
		ID                      string     `json:"id"`
		Round                   jsonUint64 `json:"round"`
		PreviousBlockVotes      []bool     `json:"previous_block_votes"`
		Proposer                string     `json:"proposer"`
	}
	var enc Transaction
	enc.Type = t.Type
	enc.Hash = t.Hash
	enc.Sender = t.Sender
	enc.SequenceNumber = jsonUint64(t.SequenceNumber)
	enc.MaxGasAmount = jsonUint64(t.MaxGasAmount)
	enc.GasUnitPrice = jsonUint64(t.GasUnitPrice)
	enc.GasCurrencyCode = t.GasCurrencyCode
	enc.ExpirationTimestampSecs = jsonUint64(t.ExpirationTimestampSecs)
	enc.Payload = t.Payload
	enc.Signature = t.Signature
	enc.Events = t.Events
	enc.Version = jsonUint64(t.Version)
	enc.StateRootHash = t.StateRootHash
	enc.EventRootHash = t.EventRootHash
	enc.GasUsed = jsonUint64(t.GasUsed)
	enc.Success = t.Success
	enc.VmStatus = t.VmStatus
	enc.AccumulatorRootHash = t.AccumulatorRootHash
	enc.Changes = t.Changes
	enc.Timestamp = jsonUint64(t.Timestamp)
	enc.ID = t.ID
	enc.Round = jsonUint64(t.Round)
	enc.PreviousBlockVotes = t.PreviousBlockVotes
	enc.Proposer = t.Proposer
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *Transaction) UnmarshalJSON(input []byte) error {
	type Transaction struct {
		Type                    *string     `json:"type"`
		Hash                    *string     `json:"hash"`
		Sender                  *string     `json:"sender"`
		SequenceNumber          *jsonUint64 `json:"sequence_number"`
		MaxGasAmount            *jsonUint64 `json:"max_gas_amount"`
		GasUnitPrice            *jsonUint64 `json:"gas_unit_price"`
		GasCurrencyCode         *string     `json:"gas_currency_code"`
		ExpirationTimestampSecs *jsonUint64 `json:"expiration_timestamp_secs"`
		Payload                 *Payload    `json:"payload"`
		Signature               *Signature  `json:"signature"`
		Events                  []Event     `json:"events"`
		Version                 *jsonUint64 `json:"version"`
		StateRootHash           *string     `json:"state_root_hash"`
		EventRootHash           *string     `json:"event_root_hash"`
		GasUsed                 *jsonUint64 `json:"gas_used"`
		Success                 *bool       `json:"success"`
		VmStatus                *string     `json:"vm_status"`
		AccumulatorRootHash     *string     `json:"accumulator_root_hash"`
		Changes                 []Change    `json:"changes"`
		Timestamp               *jsonUint64 `json:"timestamp"`
		ID                      *string     `json:"id"`
		Round                   *jsonUint64 `json:"round"`
		PreviousBlockVotes      []bool      `json:"previous_block_votes"`
		Proposer                *string     `json:"proposer"`
	}
	var dec Transaction
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type != nil {
		t.Type = *dec.Type
	}
	if dec.Hash != nil {
		t.Hash = *dec.Hash
	}
	if dec.Sender != nil {
		t.Sender = *dec.Sender
	}
	if dec.SequenceNumber != nil {
		t.SequenceNumber = uint64(*dec.SequenceNumber)
	}
	if dec.MaxGasAmount != nil {
		t.MaxGasAmount = uint64(*dec.MaxGasAmount)
	}
	if dec.GasUnitPrice != nil {
		t.GasUnitPrice = uint64(*dec.GasUnitPrice)
	}
	if dec.GasCurrencyCode != nil {
		t.GasCurrencyCode = *dec.GasCurrencyCode
	}
	if dec.ExpirationTimestampSecs != nil {
		t.ExpirationTimestampSecs = uint64(*dec.ExpirationTimestampSecs)
	}
	if dec.Payload != nil {
		t.Payload = dec.Payload
	}
	if dec.Signature != nil {
		t.Signature = dec.Signature
	}
	if dec.Events != nil {
		t.Events = dec.Events
	}
	if dec.Version != nil {
		t.Version = uint64(*dec.Version)
	}
	if dec.StateRootHash != nil {
		t.StateRootHash = *dec.StateRootHash
	}
	if dec.EventRootHash != nil {
		t.EventRootHash = *dec.EventRootHash
	}
	if dec.GasUsed != nil {
		t.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Success != nil {
		t.Success = *dec.Success
	}
	if dec.VmStatus != nil {
		t.VmStatus = *dec.VmStatus
	}
	if dec.AccumulatorRootHash != nil {
		t.AccumulatorRootHash = *dec.AccumulatorRootHash
	}
	if dec.Changes != nil {
		t.Changes = dec.Changes
	}
	if dec.Timestamp != nil {
		t.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.ID != nil {
		t.ID = *dec.ID
	}
	if dec.Round != nil {
		t.Round = uint64(*dec.Round)
	}
	if dec.PreviousBlockVotes != nil {
		t.PreviousBlockVotes = dec.PreviousBlockVotes
	}
	if dec.Proposer != nil {
		t.Proposer = *dec.Proposer
	}
	return nil
}

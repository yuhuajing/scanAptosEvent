// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package aptostypes

import (
	"encoding/json"
)

var _ = (*blockMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b Block) MarshalJSON() ([]byte, error) {
	type Block struct {
		BlockHeight    jsonUint64    `json:"block_height"`
		BlockHash      string        `json:"block_hash"`
		BlockTimestamp jsonUint64    `json:"block_timestamp"`
		FirstVersion   jsonUint64    `json:"first_version"`
		LastVersion    jsonUint64    `json:"last_version"`
		Transactions   []Transaction `json:"transactions"`
	}
	var enc Block
	enc.BlockHeight = jsonUint64(b.BlockHeight)
	enc.BlockHash = b.BlockHash
	enc.BlockTimestamp = jsonUint64(b.BlockTimestamp)
	enc.FirstVersion = jsonUint64(b.FirstVersion)
	enc.LastVersion = jsonUint64(b.LastVersion)
	enc.Transactions = b.Transactions
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *Block) UnmarshalJSON(input []byte) error {
	type Block struct {
		BlockHeight    *jsonUint64   `json:"block_height"`
		BlockHash      *string       `json:"block_hash"`
		BlockTimestamp *jsonUint64   `json:"block_timestamp"`
		FirstVersion   *jsonUint64   `json:"first_version"`
		LastVersion    *jsonUint64   `json:"last_version"`
		Transactions   []Transaction `json:"transactions"`
	}
	var dec Block
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockHeight != nil {
		b.BlockHeight = uint64(*dec.BlockHeight)
	}
	if dec.BlockHash != nil {
		b.BlockHash = *dec.BlockHash
	}
	if dec.BlockTimestamp != nil {
		b.BlockTimestamp = uint64(*dec.BlockTimestamp)
	}
	if dec.FirstVersion != nil {
		b.FirstVersion = uint64(*dec.FirstVersion)
	}
	if dec.LastVersion != nil {
		b.LastVersion = uint64(*dec.LastVersion)
	}
	if dec.Transactions != nil {
		b.Transactions = dec.Transactions
	}
	return nil
}
